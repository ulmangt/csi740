>> % Test a small 2x2 matrix

>> A = [ 1  2 ;  4  4 ]

A =

     1     2
     4     4

>> [Q, R] = mgs( A )

Q =

    0.2425    0.9701
    0.9701   -0.2425


R =

    4.1231    4.3656
         0    0.9701

>> [Q, R] = qr( A )

Q =

    0.2425    0.9701
    0.9701   -0.2425


R =

    4.1231    4.3656
         0    0.9701




>> % Test a larger non-square matrix
>> % Matlab returns the full QR decomposition and my code
>> % returns the reduced version, but the portions of the
>> % matrices which we expect to be identical are

>> A = rand( 10 , 6 )

A =

    0.8147    0.1576    0.6557    0.7060    0.4387    0.2760
    0.9058    0.9706    0.0357    0.0318    0.3816    0.6797
    0.1270    0.9572    0.8491    0.2769    0.7655    0.6551
    0.9134    0.4854    0.9340    0.0462    0.7952    0.1626
    0.6324    0.8003    0.6787    0.0971    0.1869    0.1190
    0.0975    0.1419    0.7577    0.8235    0.4898    0.4984
    0.2785    0.4218    0.7431    0.6948    0.4456    0.9597
    0.5469    0.9157    0.3922    0.3171    0.6463    0.3404
    0.9575    0.7922    0.6555    0.9502    0.7094    0.5853
    0.9649    0.9595    0.1712    0.0344    0.7547    0.2238

>> [Q, R] = qr( A )

Q =

  Columns 1 through 7

    0.3655   -0.4666    0.2411    0.1772   -0.0735   -0.0515    0.6455
    0.4064    0.1403   -0.4483    0.0432   -0.1831    0.5666    0.2119
    0.0570    0.7001    0.3279   -0.1421    0.1998    0.0198    0.3804
    0.4098   -0.2673    0.3313   -0.6321    0.3003    0.1108   -0.2973
    0.2837    0.1996    0.1278   -0.3120   -0.7745   -0.3094   -0.0262
    0.0438    0.0461    0.4879    0.3315    0.1536   -0.0593    0.1187
    0.1249    0.1454    0.3595    0.2337   -0.1175    0.6190   -0.3227
    0.2453    0.3580   -0.0908    0.1353    0.1637   -0.3144   -0.1445
    0.4296   -0.0454    0.0366    0.5136   -0.0494   -0.2515   -0.4015
    0.4329    0.0878   -0.3611   -0.0560    0.4056   -0.1380    0.0661

  Columns 8 through 10

    0.2885    0.1772    0.1410
   -0.0575   -0.1463   -0.4337
   -0.1438    0.4110   -0.0654
    0.0328    0.0122   -0.2436
   -0.1064   -0.1863    0.1542
   -0.2979   -0.6819   -0.2303
    0.1951    0.0014    0.4901
    0.7606   -0.2094   -0.1276
   -0.2886    0.4391   -0.2127
   -0.3030   -0.2044    0.5915


R =

    2.2290    1.9717    1.4558    0.9570    1.6050    1.0883
         0    1.2068    0.4480    0.0883    0.5623    0.6829
         0         0    1.3801    0.9195    0.5670    0.5436
         0         0         0    0.9920    0.1005    0.5689
         0         0         0         0    0.5446    0.0241
         0         0         0         0         0    0.6445
         0         0         0         0         0         0
         0         0         0         0         0         0
         0         0         0         0         0         0
         0         0         0         0         0         0

>> [Q, R] = mgs( A )

Q =

    0.3655   -0.4666    0.2411    0.1772   -0.0735   -0.0515
    0.4064    0.1403   -0.4483    0.0432   -0.1831    0.5666
    0.0570    0.7001    0.3279   -0.1421    0.1998    0.0198
    0.4098   -0.2673    0.3313   -0.6321    0.3003    0.1108
    0.2837    0.1996    0.1278   -0.3120   -0.7745   -0.3094
    0.0438    0.0461    0.4879    0.3315    0.1536   -0.0593
    0.1249    0.1454    0.3595    0.2337   -0.1175    0.6190
    0.2453    0.3580   -0.0908    0.1353    0.1637   -0.3144
    0.4296   -0.0454    0.0366    0.5136   -0.0494   -0.2515
    0.4329    0.0878   -0.3611   -0.0560    0.4056   -0.1380


R =

    2.2290    1.9717    1.4558    0.9570    1.6050    1.0883
         0    1.2068    0.4480    0.0883    0.5623    0.6829
         0         0    1.3801    0.9195    0.5670    0.5436
         0         0         0    0.9920    0.1005    0.5689
         0         0         0         0    0.5446    0.0241
         0         0         0         0         0    0.6445




>> % Test a singular matrix
>> % Here the test originally failed (my code returned a
>> % matrix full of NaN values due to division by 0)

>> A = zeros( 3, 3)

A =

     0     0     0
     0     0     0
     0     0     0

>> [Q, R] = qr( A )

Q =

     1     0     0
     0     1     0
     0     0     1


R =

     0     0     0
     0     0     0
     0     0     0

>> % initial incorrect result before
>> % adding check for R(i,i) == 0

>> [Q, R] = mgs( A )

Q =

   NaN   NaN   NaN
   NaN   NaN   NaN
   NaN   NaN   NaN


R =

     0   NaN   NaN
     0   NaN   NaN
     0     0   NaN

>> % corrected result

>> [Q, R] = mgs( A )

Q =

     1     0     0
     0     1     0
     0     0     1


R =

     0     0     0
     0     0     0
     0     0     0

